// <auto-generated />
using Library1.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library1.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20230725164949_init2")]
    partial class init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library1.EntityModels.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorPersonalInfoId")
                        .HasColumnType("int");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorPersonalInfoId")
                        .IsUnique();

                    b.ToTable("authors");
                });

            modelBuilder.Entity("Library1.EntityModels.AuthorPersonallInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("authorPersonallInfos");
                });

            modelBuilder.Entity("Library1.EntityModels.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("authorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("authorId");

                    b.ToTable("books");
                });

            modelBuilder.Entity("Library1.EntityModels.BookGenre", b =>
                {
                    b.Property<int>("bookId")
                        .HasColumnType("int");

                    b.Property<int>("GreneId")
                        .HasColumnType("int");

                    b.HasKey("bookId", "GreneId");

                    b.HasIndex("GreneId");

                    b.ToTable("bookGenres");
                });

            modelBuilder.Entity("Library1.EntityModels.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("Library1.EntityModels.Author", b =>
                {
                    b.HasOne("Library1.EntityModels.AuthorPersonallInfo", "AuthorPersonallInfo")
                        .WithOne()
                        .HasForeignKey("Library1.EntityModels.Author", "AuthorPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorPersonallInfo");
                });

            modelBuilder.Entity("Library1.EntityModels.Book", b =>
                {
                    b.HasOne("Library1.EntityModels.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Library1.EntityModels.BookGenre", b =>
                {
                    b.HasOne("Library1.EntityModels.Genre", "Grene")
                        .WithMany("GenreBook")
                        .HasForeignKey("GreneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library1.EntityModels.Book", "Book")
                        .WithMany("bookGenres")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Grene");
                });

            modelBuilder.Entity("Library1.EntityModels.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library1.EntityModels.Book", b =>
                {
                    b.Navigation("bookGenres");
                });

            modelBuilder.Entity("Library1.EntityModels.Genre", b =>
                {
                    b.Navigation("GenreBook");
                });
#pragma warning restore 612, 618
        }
    }
}
